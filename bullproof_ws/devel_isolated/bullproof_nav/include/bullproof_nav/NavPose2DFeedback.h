// Generated by gencpp from file bullproof_nav/NavPose2DFeedback.msg
// DO NOT EDIT!


#ifndef BULLPROOF_NAV_MESSAGE_NAVPOSE2DFEEDBACK_H
#define BULLPROOF_NAV_MESSAGE_NAVPOSE2DFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bullproof_nav
{
template <class ContainerAllocator>
struct NavPose2DFeedback_
{
  typedef NavPose2DFeedback_<ContainerAllocator> Type;

  NavPose2DFeedback_()
    : distance_left(0.0)  {
    }
  NavPose2DFeedback_(const ContainerAllocator& _alloc)
    : distance_left(0.0)  {
  (void)_alloc;
    }



   typedef float _distance_left_type;
  _distance_left_type distance_left;





  typedef boost::shared_ptr< ::bullproof_nav::NavPose2DFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bullproof_nav::NavPose2DFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct NavPose2DFeedback_

typedef ::bullproof_nav::NavPose2DFeedback_<std::allocator<void> > NavPose2DFeedback;

typedef boost::shared_ptr< ::bullproof_nav::NavPose2DFeedback > NavPose2DFeedbackPtr;
typedef boost::shared_ptr< ::bullproof_nav::NavPose2DFeedback const> NavPose2DFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bullproof_nav::NavPose2DFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bullproof_nav::NavPose2DFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bullproof_nav::NavPose2DFeedback_<ContainerAllocator1> & lhs, const ::bullproof_nav::NavPose2DFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.distance_left == rhs.distance_left;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bullproof_nav::NavPose2DFeedback_<ContainerAllocator1> & lhs, const ::bullproof_nav::NavPose2DFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bullproof_nav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bullproof_nav::NavPose2DFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bullproof_nav::NavPose2DFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bullproof_nav::NavPose2DFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bullproof_nav::NavPose2DFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bullproof_nav::NavPose2DFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bullproof_nav::NavPose2DFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bullproof_nav::NavPose2DFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cee420620fc0275f177e13260e85fa34";
  }

  static const char* value(const ::bullproof_nav::NavPose2DFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcee420620fc0275fULL;
  static const uint64_t static_value2 = 0x177e13260e85fa34ULL;
};

template<class ContainerAllocator>
struct DataType< ::bullproof_nav::NavPose2DFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bullproof_nav/NavPose2DFeedback";
  }

  static const char* value(const ::bullproof_nav::NavPose2DFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bullproof_nav::NavPose2DFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"float32 distance_left\n"
"\n"
"\n"
;
  }

  static const char* value(const ::bullproof_nav::NavPose2DFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bullproof_nav::NavPose2DFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance_left);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavPose2DFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bullproof_nav::NavPose2DFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bullproof_nav::NavPose2DFeedback_<ContainerAllocator>& v)
  {
    s << indent << "distance_left: ";
    Printer<float>::stream(s, indent + "  ", v.distance_left);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BULLPROOF_NAV_MESSAGE_NAVPOSE2DFEEDBACK_H
